<?php
/**
 * Plugin Name: WP Rocket | Modify the Used CSS
 * Description: Allows various modifications to the contents of the Used CSS generated by Remove Unused CSS
 * Author:      WP Rocket Support Team
 * Author URI:  http://wp-rocket.me/
 * License:     GNU General Public License v2 or later
 * License URI: http://www.gnu.org/licenses/gpl-2.0.html
 *
 * Copyright SAS WP MEDIA 2024
 */

namespace WP_Rocket\Helpers\rucss\rucss_modify_used_css;

// Standard plugin security, keep this line in place.
defined( 'ABSPATH' ) or die();


function get_configs() {

  $configs = [

    'rocket_rucss_external_exclusions' => [

      // Edit below line as needed to exclude specific CSS files.
      // Replace "/wp-content/plugins/plugin-name/css/file.css" with the path of the file you want to exclude.
      // To exclude multiple files, copy the entire line into a new line for each stylesheet to exclude.

      // UNCOMMENT BELOW AND EDIT TO USE THIS OPTION:
      // '/wp-content/plugins/plugin-name/css/file.css'
    ],

    'rocket_rucss_inline_content_exclusions' => [

      // Edit below line as needed to exclude blocks of inline styles.
      // Copy the entire line into a new line for each style declaration you want you exclude.

      // UNCOMMENT BELOW AND EDIT TO USE THIS OPTION:
      // '.targetSelector',
    ],

    'rocket_rucss_inline_atts_exclusions' => [

      // 

      // UNCOMMENT BELOW AND EDIT TO USE THIS OPTION:
      // '',
    ],

    'rocket_rucss_skip_styles_with_attr' => [

      // Remove external or inline styles that have the target attributes specified below
      // The styles are removed entirely - from both the original location in the page and they are also not included in the Used CSS

      // UNCOMMENT BELOW AND EDIT TO USE THIS OPTION:
      // "id='wp-block-site-logo-inline-css'",
    ],

    'prepend_css' => [

      // Add the specified styles at the BEGINNING of the Used CSS

      // UNCOMMENT BELOW AND EDIT TO USE THIS OPTION:
      // '.new_css {background: red;}',
    ],

    'append_css' => [

      // Add the specified styles at the END of the Used CSS

      // UNCOMMENT BELOW AND EDIT TO USE THIS OPTION:
      // '.new_css {background: red;}',
    ],

    'filter_css' => [

      // Replace the 'to-be-removed' value in the Used CSS with the 'to-be-inserted' value.
      // To do multiple replacements, copy & paste the entire 3 lines and customize them.

      // UNCOMMENT BELOW AND EDIT TO USE THIS OPTION:
      // '.to-be-removed{padding:10px};'
      // =>
      // '.to-be-inserted{padding:20px};',
    ],
  ];

  return $configs;
}


/**
 * Exclude external stylesheets from being removed by WP Rocket's Remove Unused CSS optimization.
 */

function external_exclusions( $external_exclusions = array() ) {

  $configs = get_configs();

  if ( empty( $configs['rocket_rucss_external_exclusions'] ) ) return $external_exclusions;

  foreach ( $configs['rocket_rucss_external_exclusions'] as $rocket_rucss_external_exclusion ) {
	  $external_exclusions[] = $rocket_rucss_external_exclusion;
  }

	return $external_exclusions;
}
add_filter( 'rocket_rucss_external_exclusions', __NAMESPACE__ . '\external_exclusions' );




/**
 * Exclude inline styles from being removed by WP Rocket's Remove Unused CSS optimization.
 */
function inline_exclusions( $inline_exclusions = array() ) {

  $configs = get_configs();

  if ( empty( $configs['rocket_rucss_inline_content_exclusions'] ) ) return $inline_exclusions;

  foreach ( $configs['rocket_rucss_inline_content_exclusions'] as $rocket_rucss_inline_content_exclusion ) {
	  $inline_exclusions[] = $rocket_rucss_inline_content_exclusion;
  }

	return $inline_exclusions;
}
add_filter( 'rocket_rucss_inline_content_exclusions', __NAMESPACE__ . '\inline_exclusions' );




/**
 * Exclude inline styles from being removed by WP Rocket's Remove Unused CSS optimization.
 */
function inline_atts_exclusions( $inline_atts_exclusions = array() ) {

  $configs = get_configs();

  if ( empty( $configs['rocket_rucss_inline_atts_exclusions'] ) ) return $inline_atts_exclusions;

  foreach ( $configs['rocket_rucss_inline_atts_exclusions'] as $rocket_rucss_inline_atts_exclusion ) {
	  $inline_atts_exclusions[] = $rocket_rucss_inline_atts_exclusion;
  }

	return $inline_atts_exclusions;
}
add_filter( 'rocket_rucss_inline_atts_exclusions', __NAMESPACE__ . '\inline_atts_exclusions' );




/**
 * Completely remove styles with target attributes from page. Styles will not be in RUCSS and also removed from their original location.
 */
function skip_styles_with_attr( $skipped_attributes = array() ) {

  $configs = get_configs();

  if ( empty( $configs['skip_styles_with_attr'] ) ) return $skipped_attributes;

  foreach( $configs['skip_styles_with_attr'] as $skip_style_with_attr ) {
    $skipped_attributes[] = $skip_style_with_attr;
  }
  
  return $skipped_attributes;

add_filter( 'rocket_rucss_skip_styles_with_attr', __NAMESPACE__ . '\skip_styles_with_attr' );





/**
 * Modify Used CSS by prepending, appending, or filtering values, depending on configs
 */
function filter_css( $css ) {

  $configs = get_configs();

  if ( ! empty( $configs['prepend_css'] ) ) {
    foreach ( $configs['prepend_css'] as $prepend_css ) {
      $css = $prepend_css . $css;
    }
  }

  if ( ! empty( $configs['append_css'] ) ) {
    foreach ( $configs['append_css'] as $append_css ) {
      $css = $css . $append_css;
    }
  }

  if ( ! empty( $configs['filter_css'] ) ) {
    foreach ( $configs['filter_css'] as $to_be_removed => $to_be_inserted ) {
      $css = str_replace( $to_be_removed, $to_be_inserted, $css );
    }
  }

  return $css;
}
add_filter( 'rocket_usedcss_content', __NAMESPACE__ . '\filter_css' );